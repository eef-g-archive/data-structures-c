List.h


* This program is a list implementation in C. It makes use of a linked list structure, in which each node contains a pointer to the value stored, the type of the value, and two pointers to the previous and next nodes in the list. It provides various functions which can be used to manipulate the list, such as adding values, inserting nodes, sorting nodes, and printing the list. 
* The List_new() function is the constructor for a new List and the List_init() function initializes the list with a head and tail node. The List_addValue() function adds a value to the list, specifying the value and its type, and the List_printList() function prints the list's contents. 
* The List_walkToIndex() function takes an index as an argument and returns the node at that index, and the List_findNodebyValue() function takes a value and returns the node containing that value. The List_insertBefore() and List_insertAfter() functions take an index and a value and insert a node with that value into the list before or after the index, respectively. 
* The List_removeAt() function removes a node at a specified index, the List_unlinkNodebyValue() function unlinks a node containing a specified value, and the List_valueSort() and List_addressSort() functions sort the list by either the values stored or the addresses of the nodes, respectively. 
* Finally, the List_clear() function clears the list and the List_destroy() function destroys the list and frees all associated memory.


Node.h


* This program implements a Node data structure using the C programming language. It contains a struct Node that stores a void* val, a type dataType, a 'next' node, a previous node, and a size field. The program also contains functions to initialize a new node, get and set its value, reset its value, destroy the node, and print its value and node.
* The Node_new() function is used to create a new node. It takes in a void* val and a dataType type as parameters and returns a pointer to the newly-created node. The Node_init() function is used to initialize the node with the given value and type. The Node_getValue() and Node_setValue() functions are used to get and set the value of the node, respectively. The Node_reset() function is used to reset the value of the node to NULL. The Node_destroy() function is used to free the memory allocated for the node. Finally, the Node_printVal() and Node_printNode() functions are used to print the value of the node and the node itself, respectively.


Queue.h
* This program implements a Queue data structure in C. It uses a linked list as the backend. 
* Queue_new() - This function creates a new queue and initializes it.
* Queue_init(Queueptr q) - This function takes a pointer to an existing queue and initializes it. 
* Queue_enqueue(Queueptr self, void* val, dataType type) - This function adds a value to the queue. It takes a pointer to the queue, the value to be added, and the type of the value. 
* Queue_dequeue(Queueptr self) - This function removes the oldest element from the queue and returns it. 
* Queue_clear(Queueptr self) - This function clears the queue of all elements.
* Queue_destroy(Queueptr self) - This function destroys the queue and all its elements. 
* Queue_print(Queueptr self) - This function prints the elements of the queue in order.


Stack.h


* This program implements a Stack data structure. 
* The Stack_new() function creates a new Stack and returns a pointer to it. 
* The Stack_init(Stackptr s) function initializes a stack to empty. 
* The Stack_Push(Stackptr self, void* val, dataType type) function pushes a new value onto a Stack.
* The Stack_Pop(Stackptr self) function pops a value off of a Stack. 
* The Stack_findNodebyValue(Stackptr self, void* val) function finds a node in a Stack by its value. 
* The Stack_Print(Stackptr self) function prints the values of a Stack.


Data-structures.c


* This program is a data-structures library that features a node and a list structure.
* A node is a data structure that holds a value, a type, and a size. The constructor for the node takes in a value and a type and creates a new node object on the heap. The node object also has a printVal, printNode, reset, and destroy functions. 
* A list is a data structure that holds a length, a head pointer, and a tail pointer. It's constructor creates a new list object on the heap. The list also has an addValue function that adds a node to the end of the list.
* This program contains a set of functions for a linked list, stack, and queue data type. 
* This program allows the user to create, add, remove, and search for values in the data types. 
* The Linked List class has a constructor, a deconstructor, and several helper functions. 
* The Stack class has a constructor, a push function, a pop function, a clear function, a find node by value function, and a print function. 
* The Queue class has a constructor, an enqueue function, a dequeue function, a clear function, and a print function. 


Data-structures.h


* This program contains code for implementing a generic doubly linked list, stack, and queue in C. Each type of data structure has some unique characteristics and functions associated with it.
* Node: A Node is a basic data structure that stores a pointer to a piece of data and a pointer to the next Node. Each Node also has a dataType field that is used to store the type of data the Node stores. Nodes have a few basic functions for initialization, getting and setting values, printing, and destruction. 
* List: A List is a doubly linked data structure that stores a collection of nodes. It has a few basic functions for adding new nodes, printing the list, finding nodes by value, inserting nodes before or after a specific node, removing a node at a given index, sorting the list by value or address, and clearing and destroying the entire list. 
* Stack: A Stack is a LIFO (Last In First Out) data structure that stores data in a similar fashion to a List, but with additional functionality for pushing and popping values. It also has a function for printing the stack and finding nodes by value.
* Queue: A Queue is a FIFO (First In First Out) data structure that stores data in a similar fashion to a List, but with additional functionality for enqueuing and dequeuing values. It also has a function for printing the queue and clearing and destroying the entire queue.